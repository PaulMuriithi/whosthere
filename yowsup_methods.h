/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -c yowsup_methods -p yowsup_methods.h:yowsup_methods.cpp com.yowsup.0.methods.xml com.yowsup.methods
 *
 * qdbusxml2cpp is Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef YOWSUP_METHODS_H_1361953676
#define YOWSUP_METHODS_H_1361953676

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.yowsup.methods
 */
class yowsup_methods: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.yowsup.methods"; }

public:
    yowsup_methods(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~yowsup_methods();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> auth_login(const QString &number, const QString &password)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(number) << QVariant::fromValue(password);
        return asyncCallWithArgumentList(QLatin1String("auth_login"), argumentList);
    }

    inline QDBusPendingReply<> getMethods()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getMethods"), argumentList);
    }

    inline QDBusPendingReply<> getVersion()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getVersion"), argumentList);
    }

    inline QDBusPendingReply<> message_send(const QDBusVariant &jid, const QDBusVariant &message)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(jid) << QVariant::fromValue(message);
        return asyncCallWithArgumentList(QLatin1String("message_send"), argumentList);
    }

    inline QDBusPendingReply<> wrapped()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("wrapped"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

#endif
